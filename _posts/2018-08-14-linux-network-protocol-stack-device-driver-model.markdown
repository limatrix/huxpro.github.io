---
layout: post
title:  "LINUX网络协议栈 - SOCKET源码分析"
categories: linux
author: 拾贝
catalog: true
tags:  
    - socket 
    - linux
---






1.1. 设备模型

由 总线（bus_type） + 设备（device） + 驱动（device_driver） 组成，在该模型下，所有的设备通过总线连接起来，即使有些设备没有连接到一根物理总线上，linux为其设置了一个内部的、虚拟的platform总线，用以维持总线、驱动、设备的关系。

因此，对于实现一个linux下的设备驱动，可以划分为两大步：

1、设备注册；

2、驱动注册。

Bus（总线）：总线是CPU和一个或多个设备之间信息交互的通道。而为了方便设备模型的抽象，所有的设备都应连接到总线上，无论是CPU内部总线、虚拟的总线还是“platform Bus”（在计算机中有这样一类设备，它们通过各自的设备控制器，直接和CPU连接，CPU可以通过常规的寻址操作访问它们（或者说访问它们的控制器）。这种连接方式，并不属于传统意义上的总线连接。但设备模型应该具备普适性，因此Linux就虚构了一条Platform Bus，供这些设备挂靠。）。

Class（分类）：在Linux设备模型中，Class的概念非常类似面向对象程序设计中的Class（类），它主要是集合具有相似功能或属性的设备，这样就可以抽象出一套可以在多个设备之间共用的数据结构和接口函数。因而从属于相同Class的设备的驱动程序，就不再需要重复定义这些公共资源，直接从Class中继承即可

Device（设备）：抽象系统中所有的硬件设备，描述它的名字、属性、从属的Bus、从属的Class等信息

Device Driver（设备驱动），Linux设备模型用Driver抽象硬件设备的驱动程序，它包含设备初始化、电源管理相关的接口实现。而Linux内核中的驱动开发，基本都围绕该抽象进行（实现所规定的接口函数）

上面提到过，Linux内核通过sys文件系统展示了设备驱动模型的内在结构，我们通过sys文件系统来看看上述抽象如何组织在一起，如何有序的管理linux设备：

